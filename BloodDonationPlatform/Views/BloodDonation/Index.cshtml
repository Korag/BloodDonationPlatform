@model BloodDonationPlatform.ViewModels.VisualizationViewModel

@{
    ViewData["Title"] = "Index";
}

<h2>Index</h2>

<h4>VisualizationViewModel</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="ReadCSVFile" enctype="multipart/form-data">
            <div class="form-group" id="inputFormGroup">
                <label asp-for="CsvFile" class="control-label"></label>
                <input asp-for="CsvFile" type="file"/>
                <span asp-validation-for="CsvFile" class="text-danger"></span>
            </div>
            <div class="form-group" id="inputFormGroup">
                <label asp-for="NameOfFile" class="control-label"></label>
                <input asp-for="NameOfFile" type="text"/>
                <span asp-validation-for="NameOfFile" class="text-danger"></span>
            </div>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div class="form-group">
    <form asp-action="SelectFiles">
        <label asp-for="AvailableFiles" class="control-label col-md-2"></label>
        <div class="col-10">
            <div class="btn-group btn-group-toggle" data-toggle="buttons">
                @foreach (var availableFile in Model.AvailableFiles)
                {
                    @*<div id="checkbox-list">*@
                <label class="btn btn-outline-secondary mr-2
                    @if (Model.SelectedFiles.Contains(availableFile.Value))
                    { <text> active </text>} ">
                    <input type="checkbox"
                           name="SelectedFiles"
                           value="@availableFile.Value"
                           autocomplete="off"
                           @if (Model.SelectedFiles.Contains(availableFile.Value)) { <text> checked </text> } />
                    <span>@availableFile.Text</span>
                </label>
                }
            </div>
            @Html.ValidationMessageFor(model => model.SelectedFiles, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            <input type="submit" value="Create" class="btn btn-primary" />
        </div>
    </form>
</div>


<div>
    <a asp-action="Index">Back to List</a>
</div>

<div id="chartdiv"></div>


<style>
    #chartdiv {
        width: 100%;
        height: 500px;
    }
</style>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script src="https://www.amcharts.com/lib/4/core.js"></script>
    <script src="https://www.amcharts.com/lib/4/charts.js"></script>
    <script src="https://www.amcharts.com/lib/4/themes/animated.js"></script>

    <script>
        am4core.ready(function () {

            // Themes begin
            am4core.useTheme(am4themes_animated);
            // Themes end

            // Create chart instance
            var chart = am4core.create("chartdiv", am4charts.RadarChart);
            chart.scrollbarX = new am4core.Scrollbar();

            var data = @Html.Raw(Model.Top20DonatorsSum);

            @*for (var i = 0; i < @Model.DonatorsWithDonations.Count; i++) {
                data.push({ category: @Model.DonatorsWithDonations.ElementAt(), value: Math.round(Math.random() * 100) });
            }*@

            chart.data = data;
            chart.radius = am4core.percent(100);
            chart.innerRadius = am4core.percent(70);

            // Create axes
            var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "category";
            categoryAxis.renderer.grid.template.location = 0;
            categoryAxis.renderer.minGridDistance = 30;
            categoryAxis.tooltip.disabled = true;
            categoryAxis.renderer.minHeight = 110;
            categoryAxis.renderer.grid.template.disabled = true;
            //categoryAxis.renderer.labels.template.disabled = true;
            let labelTemplate = categoryAxis.renderer.labels.template;
            labelTemplate.radius = am4core.percent(-80);
            labelTemplate.location = 0.5;
            labelTemplate.relativeRotation = 90;

            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
            valueAxis.renderer.grid.template.disabled = true;
            valueAxis.renderer.labels.template.disabled = true;
            valueAxis.tooltip.disabled = true;

            // Create series
            var series = chart.series.push(new am4charts.RadarColumnSeries());
            series.sequencedInterpolation = true;
            series.dataFields.valueY = "value";
            series.dataFields.categoryX = "category";
            series.columns.template.strokeWidth = 0;
            series.tooltipText = "{valueY}";
            series.columns.template.radarColumn.cornerRadius = 10;
            series.columns.template.radarColumn.innerCornerRadius = 0;

            series.tooltip.pointerOrientation = "vertical";

            // on hover, make corner radiuses bigger
            let hoverState = series.columns.template.radarColumn.states.create("hover");
            hoverState.properties.cornerRadius = 0;
            hoverState.properties.fillOpacity = 1;


            series.columns.template.adapter.add("fill", function (fill, target) {
                return chart.colors.getIndex(target.dataItem.index);
            })

            // Cursor
            chart.cursor = new am4charts.RadarCursor();
            chart.cursor.innerRadius = am4core.percent(50);
            chart.cursor.lineY.disabled = true;

        }); // end am4core.ready()
    </script>
}
